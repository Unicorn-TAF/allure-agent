using System;
using System.Linq;
using System.Text;

namespace Unicorn.ConsoleRunner
{
    internal class ArgsParser
    {
        private const string ConstTestAssembly = "--test-assembly";
        private const string ConstConfiguration = "--config";
        private const string ConstTrx = "--trx";
        private const string ConstHelp = "--help";

        internal string AssemblyPath { get; set; }

        internal string PropertiesPath { get; set; }

        internal string TrxFileName { get; set; } = null;

        internal void ParseArguments(string[] args)
        {
            if (args.Length == 0)
            {
                PrintHelpText();
                throw new ArgumentException("Required arguments were not specified");
            }

            if (args[0].Equals(ConstHelp))
            {
                PrintHelpText();
                return;
            }

            AssemblyPath = GetArgument(args, ConstTestAssembly, true);

            PropertiesPath = GetArgument(args, ConstConfiguration, true);

            TrxFileName = GetArgument(args, ConstTrx, false);
        }

        private void PrintHelpText()
        {
            Console.WriteLine("Required arguments:");
            Console.WriteLine($"    {ConstTestAssembly}=PATH_TO_TEST_ASSEMBLY");
            Console.WriteLine($"    {ConstConfiguration}=PATH_TO_CONFIGURATION_FILE");
            Console.WriteLine("Optional arguments:");
            Console.WriteLine($"    {ConstTrx}=TRX_FILE_NAME        trx is not generated by default");
        }

        private string GetArgument(string[] args, string argName, bool required)
        {
            var argument = args.Where(a => a.Trim().StartsWith(argName));

            if (argument.Any())
            {
                return argument.First().Trim().Split('=')[1].Trim();
            }
            else if (required)
            {
                PrintHelpText();
                throw new ArgumentException($"'{argName}' argument was not specified");
            }
            else
            {
                return null;
            }
        }
    }
}
