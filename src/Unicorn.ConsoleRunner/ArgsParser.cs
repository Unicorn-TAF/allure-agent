using System;
using System.Linq;
using System.Text;

namespace Unicorn.ConsoleRunner
{
    internal class ArgsParser
    {
        private const string ConstTestAssembly = "--test-assembly";
        private const string ConstConfiguration = "--config";
        private const string ConstTrx = "--trx";
        private const string ConstHelp = "--help";

        internal string AssemblyPath { get; set; }

        internal string PropertiesPath { get; set; }

        internal string TrxFileName { get; set; } = null;

        internal void ParseArguments(string[] args)
        {
            if (args.Length == 0)
            {
                PrintHelpText();
                throw new ArgumentException("Required arguments were not specified");
            }

            if (args[0].Equals(ConstHelp))
            {
                PrintHelpText();
                return;
            }

            var assemblyArgs = args.Where(a => a.Trim().StartsWith(ConstTestAssembly));

            if (assemblyArgs.Any())
            {
                AssemblyPath = assemblyArgs.First().Trim().Split('=')[1].Trim();
            }
            else
            {
                PrintHelpText();
                throw new ArgumentException($"'{ConstTestAssembly}' argument was not specified");
            }

            var configArgs = args.Where(a => a.Trim().StartsWith(ConstConfiguration));

            if (configArgs.Any())
            {
                PropertiesPath = configArgs.First().Trim().Split('=')[1].Trim();
            }
            else
            {
                PrintHelpText();
                throw new ArgumentException($"'{ConstConfiguration}' argument was not specified");
            }

            var trxArgs = args.Where(a => a.Trim().StartsWith(ConstTrx));

            if (trxArgs.Any())
            {
                TrxFileName = trxArgs.First().Trim().Split('=')[1].Trim();
            }
        }

        private void PrintHelpText()
        {
            StringBuilder help = new StringBuilder()
                .AppendLine("Required arguments:")
                .AppendLine($"    {ConstTestAssembly}=PATH_TO_TEST_ASSEMBLY")
                .AppendLine($"    {ConstConfiguration}=PATH_TO_CONFIGURATION_FILE")
                .AppendLine()
                .AppendLine("Optional arguments:")
                .AppendLine($"    {ConstTrx}=TRX_FILE_NAME        trx is not generated by default");


            Console.WriteLine(help.ToString());
        }
    }
}
